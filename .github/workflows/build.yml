name: build

on:
  push:
    branches: [ "master", "ci", "playmer/cmake_again" ]
  pull_request:
    branches: [ "master", "ci" ]

jobs:

####################################################################################
## Official Jobs
####################################################################################
  linux:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive

    - name: install dependencies (Linux)
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe"
        sudo apt-get update -y -qq
        sudo apt-get install libasound2-dev libpulse-dev libwebp-dev libxrandr-dev tar
    - name: configure
      env:
        CC: ${{ matrix.cc }}
      run: |
        ./configure --with-internal-libs
    - name: reconfigure extlibs (ogg)
      run: |
        cd extlib/src/libogg-1.3.5
        autoreconf -fi
        autoupdate
    - name: Build and Test
      run: |
        NCPUS=$(getconf _NPROCESSORS_ONLN)
        make -j $NCPUS VERBOSE=true
        make -j $NCPUS VERBOSE=true tools
        make check
        tar -czvf onscripter-en.Linux.x86-64.tar.gz \
          onscripter-en \
          README.md \
          COPYING \
          CHANGES \
          tools/ns2conv \
          tools/nsaconv \
          tools/sardec \
          tools/batchconv \
          tools/nbzdec \
          tools/ns2make \
          tools/nsamake \
          tools/sarconv \
          tools/ns2dec \
          tools/nsadec \
          tools/nscdec \
          tools/nscmake \
          tools/sarmake

    - uses: actions/upload-artifact@v4
      with:
        name: Linux x86-64 Build
        path: ${{ github.workspace }}/onscripter-en.Linux.x86-64.tar.gz
        
  ##########################################
  windows:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            sys: mingw64
            env: x86_64
            arch: x86-64
            cc: gcc
    name: windows-${{matrix.env}}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: 
          mingw-w64-${{matrix.env}}-SDL
          mingw-w64-${{matrix.env}}-SDL_ttf
          mingw-w64-${{matrix.env}}-SDL_mixer
          mingw-w64-${{matrix.env}}-SDL_image
          mingw-w64-${{matrix.env}}-bzip2
          mingw-w64-${{matrix.env}}-libogg
          mingw-w64-${{matrix.env}}-libvorbis
          mingw-w64-${{matrix.env}}-freetype
          mingw-w64-${{matrix.env}}-smpeg
          mingw-w64-${{matrix.env}}-iconv
          mingw-w64-${{matrix.env}}-zlib
          mingw-w64-${{matrix.env}}-toolchain
          mingw-w64-${{matrix.env}}-autotools
          autotools
          make
          zip

    - shell: msys2 {0}
      name: Build and Test
      run: |
        NCPUS=$(getconf _NPROCESSORS_ONLN)
        make -f ./msys2/Makefile.Windows.MSYS2.${{matrix.arch}}.insani -j $NCPUS VERBOSE=true
        make -f ./msys2/Makefile.Windows.MSYS2.${{matrix.arch}}.insani -j $NCPUS VERBOSE=true tools
        make -f ./msys2/Makefile.Windows.MSYS2.${{matrix.arch}}.insani check
        zip onscripter-en.Windows.${{matrix.sys}}.${{matrix.arch}}.zip \
          onscripter-en.exe \
          README.md \
          COPYING \
          CHANGES \
          tools/ns2conv.exe \
          tools/nsaconv.exe \
          tools/sardec.exe \
          tools/batchconv.exe \
          tools/nbzdec.exe \
          tools/ns2make.exe \
          tools/nsamake.exe \
          tools/sarconv.exe \
          tools/ns2dec.exe \
          tools/nsadec.exe \
          tools/nscdec.exe \
          tools/nscmake.exe \
          tools/sarmake.exe

    - uses: actions/upload-artifact@v4
      with:
        name: Windows ${{matrix.arch}} Build
        path: ${{ github.workspace }}/onscripter-en.Windows.${{matrix.sys}}.${{matrix.arch}}.zip
  
####################################################################################
## Unofficial Jobs
####################################################################################
  linux-cmake:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
          - os: ubuntu-latest
            cc: clang
    
    name: linux-cmake-${{ matrix.cc }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
        
      - uses: lukka/get-cmake@latest

      - name: install dependencies (Linux)
        run: |
          sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe"
          sudo apt-get update -y -qq
          sudo apt-get install libasound2-dev libpulse-dev libwebp-dev libxrandr-dev tar

      - name: build
        run: |
          cmake --preset=ninja -B build
          cmake --build build --config Release
          
  ##########################################
  mac:
    name: macos-build
    strategy:
      fail-fast: false
      matrix:
        os: [macos-latest]

    runs-on: macos-latest
    
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
        
      - uses: lukka/get-cmake@latest

      - name: build
        run: |
          cmake --preset=ninja -B build
          cmake --build build --config Release

  ##########################################
  windows-cmake-mingw:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            sys: mingw64
            env: x86_64
            arch: x86-64
            cc: gcc
          - os: windows-latest
            sys: mingw32
            env: i686
            arch: i686
            cc: gcc
    name: windows-cmake-${{matrix.env}}
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - uses: msys2/setup-msys2@v2
      with:
        msystem: ${{matrix.sys}}
        update: true
        install: 
          mingw-w64-${{matrix.env}}-toolchain
          mingw-w64-${{matrix.env}}-cmake
          ninja
          make
          zip

    - shell: msys2 {0}
      name: Build and Test
      run: |
        cmake -B build .
        (cd build/ && ninja)
        (cd build/test && ctest)
        zip onscripter-en.Windows.cmake.${{matrix.env}}.zip \
          build/onscripter-en.exe \
          README.md \
          COPYING \
          CHANGES \
          build/tools/ns2conv.exe \
          build/tools/nsaconv.exe \
          build/tools/sardec.exe \
          build/tools/batchconv.exe \
          build/tools/nbzdec.exe \
          build/tools/ns2make.exe \
          build/tools/nsamake.exe \
          build/tools/sarconv.exe \
          build/tools/ns2dec.exe \
          build/tools/nsadec.exe \
          build/tools/nscdec.exe \
          build/tools/nscmake.exe \
          build/tools/sarmake.exe

    - uses: actions/upload-artifact@v4
      with:
        name: Windows ${{matrix.arch}} CMake ${{matrix.sys}} Build
        path: ${{ github.workspace }}/onscripter-en.Windows.cmake.${{matrix.env}}.zip

  ##########################################
  windows-msvc:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            arch: x64
            target_arch: x86_64
          - os: windows-latest
            arch: x86       
            target_arch: x86
          - os: windows-latest
            arch: amd64_arm64
            target_arch: arm64
          # Unfortunately, I'm not sure if this one is fixable.
          #- os: windows-latest
          #  arch: amd64_arm
          #  target_arch: arm
    
    name: windows-cmake-msvc-${{ matrix.target_arch }}
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      
      - uses: lukka/get-cmake@latest

      - uses: TheMrMilchmann/setup-msvc-dev@v3
        with:
          arch: ${{ matrix.arch }}

      - name: Build
        shell: cmd
        run: |
          cmake --preset=ninja -B build
          cmake --build build --config Release

  ##########################################
  PSP:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            cc: gcc
    runs-on: ${{ matrix.os }}
    steps:
    - uses: actions/checkout@v4
      with:
        submodules: recursive
    
    - uses: lukka/get-cmake@latest

    - name: install dependencies (PSP)
      run: |
        sudo add-apt-repository -y "deb http://archive.ubuntu.com/ubuntu `lsb_release -sc` main universe"
        sudo apt-get update -y -qq
        sudo apt-get install build-essential pkgconf libreadline8 libusb-0.1 libgpgme11 libarchive-tools fakeroot curl zip
    - name: Download and install PSPDEV SDK
      env:
        CC: ${{ matrix.cc }}
      run: |
        curl -OL https://github.com/pspdev/pspdev/releases/latest/download/pspdev-ubuntu-latest-x86_64.tar.gz
        tar -xvf pspdev-ubuntu-latest-x86_64.tar.gz
    - name: Build
      run: |
        export PSPDEV="$PWD/pspdev"
        export PATH="$PATH:$PSPDEV/bin"
        
        cmake --preset=ninja -DCMAKE_TOOLCHAIN_FILE=${PSPDEV}/psp/share/pspdev.cmake -DBUILD_PRX=1 -DENC_PRX=1  -B build
        cmake --build build --config Release
        zip onscripter-en.PSP.zip \
          build/onscripter_en \
          build/EBOOT.PBP \
          build/onscripter_en.prx \
          build/PARAM.SFO \
          README.md \
          COPYING \
          CHANGES

    - uses: actions/upload-artifact@v4
      with:
        name: PSP Build
        path: ${{ github.workspace }}/onscripter-en.PSP.zip

  ##########################################
  Switch:
    runs-on: ubuntu-latest
    container:
      image: devkitpro/devkita64:latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: lukka/get-cmake@latest
      
      - name: Build
        run: |
          cmake --preset=ninja -DCMAKE_TOOLCHAIN_FILE=$DEVKITPRO/cmake/Switch.cmake -B build
          cmake --build build --config Release
            
  ##########################################
  devkitpro-ppc:
    strategy:
      fail-fast: false
      matrix:
        include:
          - toochain_file: WiiU
          - toochain_file: Wii
          - toochain_file: GameCube
    name: ${{ matrix.toochain_file }}
    runs-on: ubuntu-latest
    container:
      image: devkitpro/devkitppc:latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: lukka/get-cmake@latest
      
      - name: Build
        run: |
          cmake --preset=ninja -DCMAKE_TOOLCHAIN_FILE=$DEVKITPRO/cmake/${{ matrix.toochain_file }}.cmake -B build
          cmake --build build --config Release

  ##########################################
  Xbox:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive

      - uses: lukka/get-cmake@latest

      - name: Install dependencies
        run: |
          sudo apt-get update -y && sudo apt-get install -y flex bison clang lld llvm
          
      - name: Download and install NXDK SDK, then build.
        run: |
          git clone --depth 1 --recurse-submodules --shallow-submodules https://github.com/XboxDev/nxdk.git
          
          eval $(nxdk/bin/activate -s)
          cd nxdk
          make NXDK_ONLY=y
          make tools
          cd ..
          
          cmake --preset=ninja -DCMAKE_TOOLCHAIN_FILE=nxdk/share/toolchain-nxdk.cmake -B build
          cmake --build build --config Release
